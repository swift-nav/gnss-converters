function(add_asan_deps asan_target dep_target)
  #message("consider ${asan_target} ${dep_target}")
  if (NOT TARGET ${dep_target})
    #message("add_asan_deps Skipping ${dep_target}")
    target_link_libraries(${asan_target} PRIVATE ${dep_target})
    return()
  endif()

  unset(already_exists)
  list(FIND all_deps ${dep_target} already_exists)
  #message("already exists ${already_exists}")
  if (NOT ${already_exists} EQUAL -1)
    #message("${dep_target} already processed, skipped")
    return()
  endif()

  #message("process ${dep_target}")

  set(sources)
  get_target_property(sources ${dep_target} SOURCES)
  foreach(src ${sources})
    get_target_property(source_dir ${dep_target} SOURCE_DIR)
    target_sources(${asan_target} PRIVATE "${source_dir}/${src}")
  endforeach()

  unset(defs)
  get_target_property(defs ${dep_target} COMPILE_DEFINITIONS)
  if(defs)
    #message("defs ${defs}")
    foreach(def ${defs})
      if(${def} STREQUAL "-Werror")
        #message("urgh")
      else()
        target_compile_definitions(${asan_target} PRIVATE ${def})
      endif()
    endforeach()
  endif()

  unset(includes)
  get_target_property(includes ${dep_target} INCLUDE_DIRECTORIES)
  #message("includes ${includes}")
  if(includes)
    target_include_directories(${asan_target} PRIVATE ${includes})
  endif()

  #unset(opts)
  #get_target_property(opts ${dep_target} COMPILE_OPTIONS)
  #if (opts)
  #message("set opts ${opts}")
  #foreach(opt ${opts})
  #target_compile_options(${asan_target} PRIVATE ${opt})
  #endforeach()
  #endif()

  list(APPEND all_deps ${dep_target})
  set(all_deps ${all_deps} PARENT_SCOPE)

  unset(deps)
  get_target_property(deps ${dep_target} LINK_LIBRARIES)
  if (deps)
    foreach(dep ${deps})
      add_asan_deps(${asan_target} ${dep})
    endforeach()
  endif()

endfunction()

function(add_asan_variant target)
  if(NOT TARGET ${target})
    message(FATAL_ERROR "invalid target ${target}")
  endif()

  if(NOT TARGET asan-targets)
    add_custom_target(asan-targets)
  endif()

  if (NOT TARGET check-asan-afl-env)
    add_custom_target(check-asan-afl-env ${PROJECT_SOURCE_DIR}/scripts/check_asan_afl_env.sh)
  endif()

  unset(all_deps)
  set(asan_target "asan-${target}")
  add_executable(${asan_target} EXCLUDE_FROM_ALL ${PROJECT_SOURCE_DIR}/scripts/empty_translation_unit.c)
  add_dependencies(${asan_target} check-asan-afl-env)
  add_dependencies(asan-targets ${asan_target})
  set_target_properties(${asan_target} PROPERTIES COMPILE_FLAGS "-fsanitize=address" LINK_FLAGS "-fsanitize=address")

  add_asan_deps(${asan_target} ${target})
endfunction()

